{"ast":null,"code":"// MERGE SORT\nexport const mergeSort = array => {\n  if (array.length <= 1) return array;\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n};\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxiliaryArray, animations) => {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n};\nconst doMerge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) => {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // Color change for comparison\n    animations.push({\n      type: 'comparison1',\n      indices: [i, j]\n    });\n    animations.push({\n      type: 'comparison2',\n      indices: [i, j]\n    });\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // Color change for swap\n      animations.push({\n        type: 'swap',\n        indices: [k, auxiliaryArray[i]]\n      });\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // Color change for swap\n      animations.push({\n        type: 'swap',\n        indices: [k, auxiliaryArray[j]]\n      });\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // Color change for swap\n    animations.push({\n      type: 'swap',\n      indices: [k, auxiliaryArray[i]]\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // Color change for swap\n    animations.push({\n      type: 'swap',\n      indices: [k, auxiliaryArray[j]]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n};\n\n// BUBBLE SORT\nexport const bubbleSort = array => {\n  const animations = [];\n  const n = array.length;\n  let swapped;\n  for (let i = 0; i < n - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      // Color change for comparison\n      animations.push({\n        type: 'comparison1',\n        indices: [j, j + 1]\n      });\n      animations.push({\n        type: 'comparison2',\n        indices: [j, j + 1]\n      });\n      if (array[j] > array[j + 1]) {\n        // Swap elements and push the swap animation\n        animations.push({\n          type: 'swap',\n          indices: [j, array[j + 1]]\n        });\n        animations.push({\n          type: 'swap',\n          indices: [j + 1, array[j]]\n        });\n\n        // Perform the swap\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        swapped = true;\n      }\n    }\n    // If no elements were swapped, the array is sorted\n    if (!swapped) break;\n  }\n  return animations;\n};","map":{"version":3,"names":["mergeSort","array","length","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","type","indices","bubbleSort","n","swapped","temp"],"sources":["C:/Users/kaudi/Desktop/sorting-visualiser/src/components/Sorting Algorithms.js"],"sourcesContent":["// MERGE SORT\r\nexport const mergeSort = (array) => {\r\n    if (array.length <= 1) return array;\r\n    const animations = [];\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n};\r\n\r\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxiliaryArray, animations) => {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n};\r\n\r\nconst doMerge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) => {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // Color change for comparison\r\n        animations.push({ type: 'comparison1', indices: [i, j] });\r\n        animations.push({ type: 'comparison2', indices: [i, j] });\r\n        \r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // Color change for swap\r\n            animations.push({ type: 'swap', indices: [k, auxiliaryArray[i]] });\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // Color change for swap\r\n            animations.push({ type: 'swap', indices: [k, auxiliaryArray[j]] });\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // Color change for swap\r\n        animations.push({ type: 'swap', indices: [k, auxiliaryArray[i]] });\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // Color change for swap\r\n        animations.push({ type: 'swap', indices: [k, auxiliaryArray[j]] });\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n};\r\n\r\n// BUBBLE SORT\r\nexport const bubbleSort = (array) => {\r\n    const animations = [];\r\n    const n = array.length;\r\n    let swapped;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        swapped = false;\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            // Color change for comparison\r\n            animations.push({ type: 'comparison1', indices: [j, j + 1] });\r\n            animations.push({ type: 'comparison2', indices: [j, j + 1] });\r\n\r\n            if (array[j] > array[j + 1]) {\r\n                // Swap elements and push the swap animation\r\n                animations.push({ type: 'swap', indices: [j, array[j + 1]] });\r\n                animations.push({ type: 'swap', indices: [j + 1, array[j]] });\r\n\r\n                // Perform the swap\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n\r\n                swapped = true;\r\n            }\r\n        }\r\n        // If no elements were swapped, the array is sorted\r\n        if (!swapped) break;\r\n    }\r\n\r\n    return animations;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}