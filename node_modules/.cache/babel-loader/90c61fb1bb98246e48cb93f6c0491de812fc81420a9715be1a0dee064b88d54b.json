{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaudi\\\\Desktop\\\\sorting-visualiser\\\\src\\\\components\\\\Sorting Visualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Bar from './Bar';\nimport styled from 'styled-components';\nimport { mergeSort } from './Sorting Algorithms'; // Importing mergeSort function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 20px;\n    position: relative; /* Container position relative for absolute positioning */\n    height: 100vh; /* Full viewport height */\n    overflow: auto; /* Enable scrolling if content exceeds viewport */\n`;\n_c = Container;\nconst ButtonContainer = styled.div`\n    position: absolute;\n    top: 20px; /* Adjust as needed */\n    left: 50%; /* Center horizontally */\n    transform: translateX(-50%);\n    display: flex;\n    justify-content: center;\n`;\n_c2 = ButtonContainer;\nconst Button = styled.button`\n    padding: 10px 20px;\n    font-size: 16px;\n    margin-right: 10px;\n    cursor: pointer;\n`;\n_c3 = Button;\nconst ArrayContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    transform: scaleY(-1);\n    bottom: 40px; /* Fixed position from bottom */\n    position: absolute;\n    width: 100%; /* Full width */\n`;\n_c4 = ArrayContainer;\nconst SortingVisualiser = () => {\n  _s();\n  const [array, setArray] = useState([]);\n  const generateRandomArray = (length, maxValue) => {\n    return Array.from({\n      length\n    }, () => Math.floor(Math.random() * maxValue) + 1);\n  };\n  const handleResetArray = () => {\n    const newArray = generateRandomArray(130, 450); // Generate a new random array\n    setArray(newArray);\n  };\n  const handleMergeSort = () => {\n    const animations = mergeSort([...array]); // Get sorting animations\n    animateSorting(animations);\n  };\n  const animateSorting = animations => {\n    let tempArray = [...array];\n    animations.forEach((animation, index) => {\n      const {\n        comparison,\n        swap\n      } = animation;\n      setTimeout(() => {\n        if (swap) {\n          const [idx, newValue] = swap;\n          tempArray[idx] = newValue;\n          setArray([...tempArray]);\n        }\n      }, index * 10); // Adjust the delay for faster/slower animations\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ButtonContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleResetArray,\n        children: \"Reset Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleMergeSort,\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ArrayContainer, {\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(Bar, {\n        height: value\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(SortingVisualiser, \"mNEMnFfdTVMInB12EsXKuBmuKk0=\");\n_c5 = SortingVisualiser;\nexport default SortingVisualiser;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ButtonContainer\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"ArrayContainer\");\n$RefreshReg$(_c5, \"SortingVisualiser\");","map":{"version":3,"names":["React","useState","Bar","styled","mergeSort","jsxDEV","_jsxDEV","Container","div","_c","ButtonContainer","_c2","Button","button","_c3","ArrayContainer","_c4","SortingVisualiser","_s","array","setArray","generateRandomArray","length","maxValue","Array","from","Math","floor","random","handleResetArray","newArray","handleMergeSort","animations","animateSorting","tempArray","forEach","animation","index","comparison","swap","setTimeout","idx","newValue","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","value","height","_c5","$RefreshReg$"],"sources":["C:/Users/kaudi/Desktop/sorting-visualiser/src/components/Sorting Visualiser.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Bar from './Bar';\r\nimport styled from 'styled-components';\r\nimport { mergeSort } from './Sorting Algorithms'; // Importing mergeSort function\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-top: 20px;\r\n    position: relative; /* Container position relative for absolute positioning */\r\n    height: 100vh; /* Full viewport height */\r\n    overflow: auto; /* Enable scrolling if content exceeds viewport */\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n    position: absolute;\r\n    top: 20px; /* Adjust as needed */\r\n    left: 50%; /* Center horizontally */\r\n    transform: translateX(-50%);\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst ArrayContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    transform: scaleY(-1);\r\n    bottom: 40px; /* Fixed position from bottom */\r\n    position: absolute;\r\n    width: 100%; /* Full width */\r\n`;\r\n\r\nconst SortingVisualiser = () => {\r\n    const [array, setArray] = useState([]);\r\n\r\n    const generateRandomArray = (length, maxValue) => {\r\n        return Array.from({ length }, () => Math.floor(Math.random() * maxValue) + 1);\r\n    };\r\n\r\n    const handleResetArray = () => {\r\n        const newArray = generateRandomArray(130, 450); // Generate a new random array\r\n        setArray(newArray);\r\n    };\r\n\r\n    const handleMergeSort = () => {\r\n        const animations = mergeSort([...array]); // Get sorting animations\r\n        animateSorting(animations);\r\n    };\r\n\r\n    const animateSorting = (animations) => {\r\n        let tempArray = [...array];\r\n        animations.forEach((animation, index) => {\r\n            const { comparison, swap } = animation;\r\n            setTimeout(() => {\r\n                if (swap) {\r\n                    const [idx, newValue] = swap;\r\n                    tempArray[idx] = newValue;\r\n                    setArray([...tempArray]);\r\n                }\r\n            }, index * 10); // Adjust the delay for faster/slower animations\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ButtonContainer>\r\n            <Button onClick={handleResetArray}>Reset Array</Button>\r\n            <Button onClick={handleMergeSort}>Merge Sort</Button>\r\n            </ButtonContainer>\r\n            <ArrayContainer>\r\n                {array.map((value, idx) => (\r\n                    <Bar key={idx} height={value} />\r\n                ))}\r\n            </ArrayContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SortingVisualiser;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}