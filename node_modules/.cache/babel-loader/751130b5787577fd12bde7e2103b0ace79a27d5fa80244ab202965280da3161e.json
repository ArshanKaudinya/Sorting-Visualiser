{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length <= 1) return array;\n  const animations = [];\n  mergeSortHelper(array, 0, array.length - 1, array.slice(), animations);\n  return animations;\n};\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxArray, animations) => {\n  if (startIdx === endIdx) return;\n  const midIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxArray, startIdx, midIdx, mainArray, animations);\n  mergeSortHelper(auxArray, midIdx + 1, endIdx, mainArray, animations);\n  merge(mainArray, startIdx, midIdx, endIdx, auxArray, animations);\n};\nconst merge = (mainArray, startIdx, midIdx, endIdx, auxArray, animations) => {\n  let k = startIdx,\n    i = startIdx,\n    j = midIdx + 1;\n  while (i <= midIdx || j <= endIdx) {\n    if (j > endIdx || i <= midIdx && auxArray[i] <= auxArray[j]) {\n      animations.push({\n        type: 'comparison1',\n        indices: [i, j]\n      });\n      animations.push({\n        type: 'swap',\n        indices: [k, auxArray[i]]\n      });\n      mainArray[k++] = auxArray[i++];\n    } else {\n      animations.push({\n        type: 'comparison2',\n        indices: [i, j]\n      });\n      animations.push({\n        type: 'swap',\n        indices: [k, auxArray[j]]\n      });\n      mainArray[k++] = auxArray[j++];\n    }\n  }\n};\n\n// BUBBLE SORT\nexport const bubbleSort = array => {\n  const animations = [];\n  const n = array.length;\n  let swapped;\n  for (let i = 0; i < n - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      // Color change for comparison\n      animations.push({\n        type: 'comparison1',\n        indices: [j, j + 1]\n      });\n      animations.push({\n        type: 'comparison2',\n        indices: [j, j + 1]\n      });\n      if (array[j] > array[j + 1]) {\n        // Swap elements and push the swap animation\n        animations.push({\n          type: 'swap',\n          indices: [j, array[j + 1]]\n        });\n        animations.push({\n          type: 'swap',\n          indices: [j + 1, array[j]]\n        });\n\n        // Perform the swap\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        swapped = true;\n      }\n    }\n    // If no elements were swapped, the array is sorted\n    if (!swapped) break;\n  }\n  return animations;\n};","map":{"version":3,"names":["mergeSort","array","length","animations","mergeSortHelper","slice","mainArray","startIdx","endIdx","auxArray","midIdx","Math","floor","merge","k","i","j","push","type","indices","bubbleSort","n","swapped","temp"],"sources":["C:/Users/kaudi/Desktop/sorting-visualiser/src/components/Sorting Algorithms.js"],"sourcesContent":["export const mergeSort = (array) => {\r\n    if (array.length <= 1) return array;\r\n    const animations = [];\r\n    mergeSortHelper(array, 0, array.length - 1, array.slice(), animations);\r\n    return animations;\r\n};\r\n\r\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxArray, animations) => {\r\n    if (startIdx === endIdx) return;\r\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxArray, startIdx, midIdx, mainArray, animations);\r\n    mergeSortHelper(auxArray, midIdx + 1, endIdx, mainArray, animations);\r\n    merge(mainArray, startIdx, midIdx, endIdx, auxArray, animations);\r\n};\r\n\r\nconst merge = (mainArray, startIdx, midIdx, endIdx, auxArray, animations) => {\r\n    let k = startIdx, i = startIdx, j = midIdx + 1;\r\n\r\n    while (i <= midIdx || j <= endIdx) {\r\n        if (j > endIdx || (i <= midIdx && auxArray[i] <= auxArray[j])) {\r\n            animations.push({ type: 'comparison1', indices: [i, j] });\r\n            animations.push({ type: 'swap', indices: [k, auxArray[i]] });\r\n            mainArray[k++] = auxArray[i++];\r\n        } else {\r\n            animations.push({ type: 'comparison2', indices: [i, j] });\r\n            animations.push({ type: 'swap', indices: [k, auxArray[j]] });\r\n            mainArray[k++] = auxArray[j++];\r\n        }\r\n    }\r\n};\r\n\r\n// BUBBLE SORT\r\nexport const bubbleSort = (array) => {\r\n    const animations = [];\r\n    const n = array.length;\r\n    let swapped;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        swapped = false;\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            // Color change for comparison\r\n            animations.push({ type: 'comparison1', indices: [j, j + 1] });\r\n            animations.push({ type: 'comparison2', indices: [j, j + 1] });\r\n\r\n            if (array[j] > array[j + 1]) {\r\n                // Swap elements and push the swap animation\r\n                animations.push({ type: 'swap', indices: [j, array[j + 1]] });\r\n                animations.push({ type: 'swap', indices: [j + 1, array[j]] });\r\n\r\n                // Perform the swap\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n\r\n                swapped = true;\r\n            }\r\n        }\r\n        // If no elements were swapped, the array is sorted\r\n        if (!swapped) break;\r\n    }\r\n\r\n    return animations;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}