{"ast":null,"code":"export const MergeSort = (array, animations = []) => {\n  if (array.length <= 1) {\n    return array;\n  }\n  const mid = Math.floor(array.length / 2);\n  const first = array.slice(0, mid);\n  const second = array.slice(mid);\n  const sortedFirst = MergeSort(first, animations);\n  const sortedSecond = MergeSort(second, animations);\n  return merge(sortedFirst, sortedSecond, animations);\n};\n_c = MergeSort;\nconst merge = (first, second, animations) => {\n  const sortedArray = [];\n  let i = 0,\n    j = 0;\n  while (i < first.length && j < second.length) {\n    if (first[i] <= second[j]) {\n      sortedArray.push(first[i]);\n      animations.push({\n        type: 'merge',\n        value: first[i]\n      });\n      i++;\n    } else {\n      sortedArray.push(second[j]);\n      animations.push({\n        type: 'merge',\n        value: second[j]\n      });\n      j++;\n    }\n  }\n  while (i < first.length) {\n    sortedArray.push(first[i]);\n    animations.push({\n      type: 'merge',\n      value: first[i]\n    });\n    i++;\n  }\n  while (j < second.length) {\n    sortedArray.push(second[j]);\n    animations.push({\n      type: 'merge',\n      value: second[j]\n    });\n    j++;\n  }\n  return sortedArray;\n};\nvar _c;\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"names":["MergeSort","array","animations","length","mid","Math","floor","first","slice","second","sortedFirst","sortedSecond","merge","_c","sortedArray","i","j","push","type","value","$RefreshReg$"],"sources":["C:/Users/kaudi/Desktop/sorting-visualiser/src/components/Sorting Algorithms.js"],"sourcesContent":["export const MergeSort = (array, animations = []) => {\r\n    if (array.length <= 1) {\r\n      return array;\r\n    }\r\n  \r\n    const mid = Math.floor(array.length / 2);\r\n    const first = array.slice(0, mid);\r\n    const second = array.slice(mid);\r\n  \r\n    const sortedFirst = MergeSort(first, animations);\r\n    const sortedSecond = MergeSort(second, animations);\r\n  \r\n    return merge(sortedFirst, sortedSecond, animations);\r\n  };\r\n\r\nconst merge = (first, second, animations) => {\r\n    const sortedArray = [];\r\n    let i = 0, j = 0;\r\n\r\n    while (i < first.length && j < second.length) {\r\n        if (first[i] <= second[j]) {\r\n        sortedArray.push(first[i]);\r\n        animations.push({ type: 'merge', value: first[i] });\r\n        i++;\r\n        } else {\r\n        sortedArray.push(second[j]);\r\n        animations.push({ type: 'merge', value: second[j] });\r\n        j++;\r\n        }\r\n    }\r\n\r\n    while (i < first.length) {\r\n        sortedArray.push(first[i]);\r\n        animations.push({ type: 'merge', value: first[i] });\r\n        i++;\r\n    }\r\n\r\n    while (j < second.length) {\r\n        sortedArray.push(second[j]);\r\n        animations.push({ type: 'merge', value: second[j] });\r\n        j++;\r\n    }\r\n\r\n    return sortedArray;\r\n};"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGA,CAACC,KAAK,EAAEC,UAAU,GAAG,EAAE,KAAK;EACjD,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IACrB,OAAOF,KAAK;EACd;EAEA,MAAMG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC;EACxC,MAAMI,KAAK,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,EAAEJ,GAAG,CAAC;EACjC,MAAMK,MAAM,GAAGR,KAAK,CAACO,KAAK,CAACJ,GAAG,CAAC;EAE/B,MAAMM,WAAW,GAAGV,SAAS,CAACO,KAAK,EAAEL,UAAU,CAAC;EAChD,MAAMS,YAAY,GAAGX,SAAS,CAACS,MAAM,EAAEP,UAAU,CAAC;EAElD,OAAOU,KAAK,CAACF,WAAW,EAAEC,YAAY,EAAET,UAAU,CAAC;AACrD,CAAC;AAACW,EAAA,GAbSb,SAAS;AAetB,MAAMY,KAAK,GAAGA,CAACL,KAAK,EAAEE,MAAM,EAAEP,UAAU,KAAK;EACzC,MAAMY,WAAW,GAAG,EAAE;EACtB,IAAIC,CAAC,GAAG,CAAC;IAAEC,CAAC,GAAG,CAAC;EAEhB,OAAOD,CAAC,GAAGR,KAAK,CAACJ,MAAM,IAAIa,CAAC,GAAGP,MAAM,CAACN,MAAM,EAAE;IAC1C,IAAII,KAAK,CAACQ,CAAC,CAAC,IAAIN,MAAM,CAACO,CAAC,CAAC,EAAE;MAC3BF,WAAW,CAACG,IAAI,CAACV,KAAK,CAACQ,CAAC,CAAC,CAAC;MAC1Bb,UAAU,CAACe,IAAI,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAEZ,KAAK,CAACQ,CAAC;MAAE,CAAC,CAAC;MACnDA,CAAC,EAAE;IACH,CAAC,MAAM;MACPD,WAAW,CAACG,IAAI,CAACR,MAAM,CAACO,CAAC,CAAC,CAAC;MAC3Bd,UAAU,CAACe,IAAI,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAEV,MAAM,CAACO,CAAC;MAAE,CAAC,CAAC;MACpDA,CAAC,EAAE;IACH;EACJ;EAEA,OAAOD,CAAC,GAAGR,KAAK,CAACJ,MAAM,EAAE;IACrBW,WAAW,CAACG,IAAI,CAACV,KAAK,CAACQ,CAAC,CAAC,CAAC;IAC1Bb,UAAU,CAACe,IAAI,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAEZ,KAAK,CAACQ,CAAC;IAAE,CAAC,CAAC;IACnDA,CAAC,EAAE;EACP;EAEA,OAAOC,CAAC,GAAGP,MAAM,CAACN,MAAM,EAAE;IACtBW,WAAW,CAACG,IAAI,CAACR,MAAM,CAACO,CAAC,CAAC,CAAC;IAC3Bd,UAAU,CAACe,IAAI,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAEV,MAAM,CAACO,CAAC;IAAE,CAAC,CAAC;IACpDA,CAAC,EAAE;EACP;EAEA,OAAOF,WAAW;AACtB,CAAC;AAAC,IAAAD,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}