{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length <= 1) return array;\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n};\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxiliaryArray, animations) => {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n};\nconst doMerge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) => {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push({\n      comparison: [i, j]\n    });\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push({\n        swap: [k, auxiliaryArray[i]]\n      });\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push({\n        swap: [k, auxiliaryArray[j]]\n      });\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push({\n      swap: [k, auxiliaryArray[i]]\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push({\n      swap: [k, auxiliaryArray[j]]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n};","map":{"version":3,"names":["mergeSort","array","length","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","comparison","swap"],"sources":["C:/Users/kaudi/Desktop/sorting-visualiser/src/components/Sorting Algorithms.js"],"sourcesContent":["export const mergeSort = (array) => {\r\n    if (array.length <= 1) return array;\r\n    const animations = [];\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n};\r\n\r\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxiliaryArray, animations) => {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n};\r\n\r\nconst doMerge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) => {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push({ comparison: [i, j] });\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push({ swap: [k, auxiliaryArray[i]] });\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push({ swap: [k, auxiliaryArray[j]] });\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push({ swap: [k, auxiliaryArray[i]] });\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push({ swap: [k, auxiliaryArray[j]] });\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n};"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAK,IAAK;EAChC,IAAIA,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE,OAAOD,KAAK;EACnC,MAAME,UAAU,GAAG,EAAE;EACrB,MAAMC,cAAc,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC;EACpCC,eAAe,CAACL,KAAK,EAAE,CAAC,EAAEA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAEE,cAAc,EAAED,UAAU,CAAC;EACvE,OAAOA,UAAU;AACrB,CAAC;AAED,MAAMG,eAAe,GAAGA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEL,cAAc,EAAED,UAAU,KAAK;EACjF,IAAIK,QAAQ,KAAKC,MAAM,EAAE;EACzB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,QAAQ,GAAGC,MAAM,IAAI,CAAC,CAAC;EACrDH,eAAe,CAACF,cAAc,EAAEI,QAAQ,EAAEE,SAAS,EAAEH,SAAS,EAAEJ,UAAU,CAAC;EAC3EG,eAAe,CAACF,cAAc,EAAEM,SAAS,GAAG,CAAC,EAAED,MAAM,EAAEF,SAAS,EAAEJ,UAAU,CAAC;EAC7EU,OAAO,CAACN,SAAS,EAAEC,QAAQ,EAAEE,SAAS,EAAED,MAAM,EAAEL,cAAc,EAAED,UAAU,CAAC;AAC/E,CAAC;AAED,MAAMU,OAAO,GAAGA,CAACN,SAAS,EAAEC,QAAQ,EAAEE,SAAS,EAAED,MAAM,EAAEL,cAAc,EAAED,UAAU,KAAK;EACpF,IAAIW,CAAC,GAAGN,QAAQ;EAChB,IAAIO,CAAC,GAAGP,QAAQ;EAChB,IAAIQ,CAAC,GAAGN,SAAS,GAAG,CAAC;EACrB,OAAOK,CAAC,IAAIL,SAAS,IAAIM,CAAC,IAAIP,MAAM,EAAE;IAClCN,UAAU,CAACc,IAAI,CAAC;MAAEC,UAAU,EAAE,CAACH,CAAC,EAAEC,CAAC;IAAE,CAAC,CAAC;IACvC,IAAIZ,cAAc,CAACW,CAAC,CAAC,IAAIX,cAAc,CAACY,CAAC,CAAC,EAAE;MACxCb,UAAU,CAACc,IAAI,CAAC;QAAEE,IAAI,EAAE,CAACL,CAAC,EAAEV,cAAc,CAACW,CAAC,CAAC;MAAE,CAAC,CAAC;MACjDR,SAAS,CAACO,CAAC,EAAE,CAAC,GAAGV,cAAc,CAACW,CAAC,EAAE,CAAC;IACxC,CAAC,MAAM;MACHZ,UAAU,CAACc,IAAI,CAAC;QAAEE,IAAI,EAAE,CAACL,CAAC,EAAEV,cAAc,CAACY,CAAC,CAAC;MAAE,CAAC,CAAC;MACjDT,SAAS,CAACO,CAAC,EAAE,CAAC,GAAGV,cAAc,CAACY,CAAC,EAAE,CAAC;IACxC;EACJ;EACA,OAAOD,CAAC,IAAIL,SAAS,EAAE;IACnBP,UAAU,CAACc,IAAI,CAAC;MAAEE,IAAI,EAAE,CAACL,CAAC,EAAEV,cAAc,CAACW,CAAC,CAAC;IAAE,CAAC,CAAC;IACjDR,SAAS,CAACO,CAAC,EAAE,CAAC,GAAGV,cAAc,CAACW,CAAC,EAAE,CAAC;EACxC;EACA,OAAOC,CAAC,IAAIP,MAAM,EAAE;IAChBN,UAAU,CAACc,IAAI,CAAC;MAAEE,IAAI,EAAE,CAACL,CAAC,EAAEV,cAAc,CAACY,CAAC,CAAC;IAAE,CAAC,CAAC;IACjDT,SAAS,CAACO,CAAC,EAAE,CAAC,GAAGV,cAAc,CAACY,CAAC,EAAE,CAAC;EACxC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}