{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaudi\\\\Desktop\\\\sorting-visualiser\\\\src\\\\components\\\\Sorting Visualiser.js\",\n  _s = $RefreshSig$();\n// SortingVisualiser.js\nimport React, { useState, useEffect } from 'react';\nimport Bar from './Bar';\nimport styled from 'styled-components';\nimport { mergeSort } from './Sorting Algorithms'; // Importing mergeSort function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArrayContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    transform: scaleY(-1);\n    bottom: 40px;\n    position: absolute;\n`;\n_c = ArrayContainer;\nconst SortingVisualiser = () => {\n  _s();\n  const [array, setArray] = useState([]);\n  useEffect(() => {\n    resetArray();\n  }, []);\n  const resetArray = () => {\n    const newArray = Array.from({\n      length: 130\n    }, () => Math.floor(Math.random() * 450) + 1);\n    setArray(newArray);\n  };\n  const handleMergeSort = () => {\n    const animations = mergeSort(array);\n    animateSorting(animations);\n  };\n  const animateSorting = animations => {\n    animations.forEach((animation, index) => {\n      const {\n        comparison,\n        swap\n      } = animation;\n      setTimeout(() => {\n        if (comparison) {\n          const [leftIndex, rightIndex] = comparison;\n          // Implement visual highlighting for comparison\n        }\n        if (swap) {\n          setArray(prevArray => {\n            const newArray = [...prevArray];\n            const [idx, newValue] = swap;\n            newArray[idx] = newValue;\n            return newArray;\n          });\n        }\n      }, index * 10); // Adjust the delay for faster/slower animations\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ArrayContainer, {\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(Bar, {\n        height: value\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMergeSort,\n      children: \"Merge Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(SortingVisualiser, \"SzvAfEsYVsRCwZAfWWLACzLXp2M=\");\n_c2 = SortingVisualiser;\nexport default SortingVisualiser;\nvar _c, _c2;\n$RefreshReg$(_c, \"ArrayContainer\");\n$RefreshReg$(_c2, \"SortingVisualiser\");","map":{"version":3,"names":["React","useState","useEffect","Bar","styled","mergeSort","jsxDEV","_jsxDEV","ArrayContainer","div","_c","SortingVisualiser","_s","array","setArray","resetArray","newArray","Array","from","length","Math","floor","random","handleMergeSort","animations","animateSorting","forEach","animation","index","comparison","swap","setTimeout","leftIndex","rightIndex","prevArray","idx","newValue","children","map","value","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/kaudi/Desktop/sorting-visualiser/src/components/Sorting Visualiser.js"],"sourcesContent":["// SortingVisualiser.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Bar from './Bar';\r\nimport styled from 'styled-components';\r\nimport { mergeSort } from './Sorting Algorithms'; // Importing mergeSort function\r\n\r\nconst ArrayContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    transform: scaleY(-1);\r\n    bottom: 40px;\r\n    position: absolute;\r\n`;\r\n\r\nconst SortingVisualiser = () => {\r\n    const [array, setArray] = useState([]);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, []);\r\n\r\n    const resetArray = () => {\r\n        const newArray = Array.from({ length: 130 }, () => Math.floor(Math.random() * 450) + 1);\r\n        setArray(newArray);\r\n    };\r\n\r\n    const handleMergeSort = () => {\r\n        const animations = mergeSort(array);\r\n        animateSorting(animations);\r\n    };\r\n\r\n    const animateSorting = (animations) => {\r\n        animations.forEach((animation, index) => {\r\n            const { comparison, swap } = animation;\r\n            setTimeout(() => {\r\n                if (comparison) {\r\n                    const [leftIndex, rightIndex] = comparison;\r\n                    // Implement visual highlighting for comparison\r\n                }\r\n                if (swap) {\r\n                    setArray((prevArray) => {\r\n                        const newArray = [...prevArray];\r\n                        const [idx, newValue] = swap;\r\n                        newArray[idx] = newValue;\r\n                        return newArray;\r\n                    });\r\n                }\r\n            }, index * 10); // Adjust the delay for faster/slower animations\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ArrayContainer>\r\n                {array.map((value, idx) => (\r\n                    <Bar key={idx} height={value} />\r\n                ))}\r\n            </ArrayContainer>\r\n            {/* Button for triggering merge sort */}\r\n            <button onClick={resetArray}></button>\r\n            <button onClick={handleMergeSort}>Merge Sort</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortingVisualiser;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}